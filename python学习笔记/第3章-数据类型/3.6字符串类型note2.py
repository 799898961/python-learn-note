# 3.6字符串类型note2.py

# c风格输出
print("the number is %d" %10)

# 1.一对三引号 ''' XXX ''' 表示字符串或多行注释
# 在未对三引号内的内容对变量赋值的情况下可理解为注释
# Q1：在字符串中包含单引号或双引号
# A1：使字符串最外侧的引号与所用引号不同
# Q2：在字符串内同时使用单双引号
# A2：在字符串的最外侧使用三引号

#2.使用[M:N:K]根据步长对字符串切片
# <某字符串>[M:N]
# M缺失表示至开头，N缺失表示至结尾
# <某字符串>[M:N:K]
# 表示每K个字符取一次 或 每隔(K-1)个字符取一次
# 例："0123456789"[1:8:2] 的结果为 "1357"
# 表示从第1号位的字符“1”至第8号位的字符“8”，从“1”开始，
# 每2个字符串去一次 或 每隔1个字符串取一次

# 3.字符串的逆序：
# <某字符串>[::-1] 结果是 >串符字某<
# 例："0123456789"[::-1] 的结果为 "9876543210"

# 4.转义符 \
# 转义符表达特定字符的本意
# Q1：怎样在双引号的字符串中使用双引号
# A1：使用 \"
# 转义字符形成一些组合，表达一些不可打印的含义
# "\b" 回退
# "\n" 换行(光标移动到下行行首)
# "\r" 回车(光标移动到本行行首)

# 5.字符串操作符
# x + y 连接两个字符串
# n*x 或 x*n 复制n次字符串
# x in s 如果x是s的子串，返回true，否则返回false

# 6.字符串处理函数
# len(<字符串>) 返回字符串的长度
# 例：len("一二三456") 结果为 6
# str(x) 对任意类型的 x 转化成所对应的字符串类型
# 例：str(1.23) 结果为 "1.23"   str([1,2]) 结果为 "[1,2]"
# hex(x) 整数x转化为对应的十六进制小写形式字符串
# oct(x) 整数x转化为对应的八进制小写形式字符串
# chr(u) u为Unicode编码，返回其对应的字符
# ord(x) x为字符，返回其对应的Unicode编码
print("1+1=2" +  chr(10004))
for i in range (12):
    print(chr(9800 + i), end=" ")

print()
input("123" + "456 : ")
# print中的end：
# print默认是打印一行，结尾加换行。
# end='' 意思是末尾不换行，输出时在输出后接end引号中的内容 不填则为紧密输出

# 7.字符串处理方法
# 下列函数中的str均指 <某字符串>
# (1) str.lower() 返回字符串的副本，全部字符小写
# (2) str.upper() 全部字符大写
# (3) str.split(sep=None) 返回一个列表，由str根据sep被分割的部分组成
# 例："a,b,c".split(",") 结果为 ['a','b','c']
# split()相当于一个按关键字搜索的函数，它遍历整个字符串并搜索关键字，
# 以搜索到的关键字为界限分割字符串，并将分割好的字符串转为列表类型
# (4) str.count(sub) 返回子串sub在str中出现的次数
# 例："an apple a day".count("a") 结果为 4
# (5) str.replace(old, new) 返回字符串str副本，所有old子串被替换为new
# 例："python".replace("n", "n123.io") 结果为 "python123.io"
# (6) str.center(width[,fillchar]) 字符串str根据width居中，fillchar可选
# "python".center(20, "=") 结果为
# =======python=======
# 表示在20个字符的宽度内，将python居中，并用“=”填补空白部分
# (7) str.strip(chars) 从str中去掉在其左侧和右侧chars中列出的字符
# 例： "= python=".strip(" =np") 结果为 "ytho"
# (8) str.join(iter) 在iter变量除最后元素外每个元素后加一个str
# 主要用于字符串的分割等
# 例：",".join("12345") 结果为 "1,2,3,4,5"

# 8.字符串类型的格式化
# 格式化是对字符串进行格式表达的方式

# 9.格式化之format函数
# (1)用法：<模板字符串>
# (2) {} 占位信息符 例：
# "{}:计算机中{}的CPU占有率为{}%".format("2018-10-10","AMD",10)
# 表示format中对应的参数按照对应的顺序填到{}中
# 从左至右在默认情况下，每一个{}的序号为0,1,2……以此类推
# 分别对应format函数中在默认情况下从左至右的参数序号也为0,1,2……
#
# 可以在{}中添加指定的参数的参数序号，例：
# "{1}:计算机中{0}的CPU占有率为{2}%".format("2018-10-10","AMD",10)
# “1” --> "AMD" “0” --> "2018-10-10" “2” --> 10

# 10.对format()输出格式的控制
# 在{}内部对格式化的配置方式
# {<参数序号>:<格式控制标记>} 其中 : 为引导标记
# 一般的：
# (1)对于字符型的输出格式化:
# a. 填充 <某字符> 用于填充的单个字符
# b. 对齐 <对齐字符>  ^ 居中对齐; < 左对齐; > 右对齐
# c. 宽度 <数字> 设定的输出宽度
# 例:
# "{0:=^20}".format("python") 结果为
# =======python======
# 表示format的参数中的第0个参数, 以居中对齐的方式, 输出宽度为20的字符串, 空位用 = 号补齐
# "{0:*>10}".format("bit") 结果为
# *******bit
# 表示format的参数中的第0个参数, 10个字符宽度的右对齐, 用 * 号补齐
# "{:10}".format("bit") 结果为
# bit       <--bit后有7个空位
# 在未给出对齐方式的情况下默认为左对齐
#
# (2)对于数值型的输出格式化:
# a. <,> 数字的千位分隔符, 一般用于财务方面
# b. <.精度值> 填入数字, 表示浮点数小数精度或字符串最大输出长度
# c. <类型> 填入类型符, 表示输出的类型
# 整数类型: 
#   b —— 二进制输出；   c —— 字符形式，对应的Unicode编码符号
#   o —— 八进制；       d —— 十进制
#   x —— 小写十六进制；  X —— 大写十六进制
# 浮点数形式：
#   e —— 小写科学计数法     E —— 大写科学计数法
#   f —— 浮点数             % —— 以百分数的形式输出
# 例：
# "{0:,.2f}".format(12345.6789) 结果为 12,345.68
# "{0:b},{0:c},{0:o},{0:d},{0:x},{0:X}".format(425) 结果为
# 110101001,∑,651,425,1a9,1A9
# "{0:e},{0:E},{0:f},{0:%}".format(3.14) 结果为
# 3.140000e+00,3.140000E+00,3.140000,314.000000%

# Python字符串格式化
# Python 支持格式化字符串的输出 。尽管这样可能会用到非常复杂的表达式，
# 但最基本的用法是将一个值插入到一个有字符串格式符 %s 的字符串中。
# 在 Python 中，字符串格式化使用与 C 中 printf 函数一样的语法。
# 例：
# print ("我叫 %s 今年 %d 岁!" % ('小明', 10))
# >>> 我叫 小明 今年 10 岁!
# python字符串格式化符号:
#  %c	 格式化字符及其ASCII码
#  %s	 格式化字符串
#  %d	 格式化整数
#  %u	 格式化无符号整型
#  %o	 格式化无符号八进制数
#  %x	 格式化无符号十六进制数
#  %X	 格式化无符号十六进制数（大写）
#  %f	 格式化浮点数字，可指定小数点后的精度
#  %e	 用科学计数法格式化浮点数
#  %E	 作用同%e，用科学计数法格式化浮点数
#  %g	 %f和%e的简写
#  %G	 %f 和 %E 的简写
#  %p	 用十六进制数格式化变量的地址

# ' '.join("%s" %di for di in list1)
# 此方法可用于去掉输出时列表外的括号
# ' '.join(str(i) for i in list1)
# join方法只能字符串


# in 和 not in 用于判断子串