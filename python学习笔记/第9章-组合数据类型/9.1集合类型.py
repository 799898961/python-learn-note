# 9.1集合类型.py

a = {"python", 123, ("python", 123)} # 使用{}建立集合
b = set("pypy123") # 使用set()建立集合
c = {"p", "y", 123}
print(c-b)
print(b-c)
for item in c:
    print(item, end=" ")

try : 
    while True :
        print(c.pop(), end=" ")
except :
    pass

ls = ['p', 'p', 'y', 'y', 123]
s = set(ls) # 利用了集合元素无重复的特点
lt = list(s) # 将集合转换为列表
print(lt)


# 集合元素之间无序，唯一，不存在相同元素
# 集合元素不可更改，不能是可变数据类型
# 一旦改变就可能与其他元素一样，可能出错

# 非可变数据类型：整数、浮点数、复数、字符串、元组

# 集合用大括号{}表示，元素之间用逗号分隔
# 建立集合类型用 {} 或 set()
# 建立一个空集合类型，必须用set()

# 使用set()建立的集合会使得字符串中的每一个字符
# 单独拆分，变成集合的一个元素,重复的元素保留一个
# 各元素间的顺序随机(无序性)
# 用{}建立的集合也会去重

# 集合运算符：
# S|T 并集  S&T 交集  
# S-T 差集 ：包括在集合S但不在T中的元素
# S^T 补集 ：包括集合S和T中的非相同元素
# S<=T 或 S<T ：返回true或false，判断S和T的子集关系
# S>=T 或 S>T ：返回true或false，判断S和T的包含关系
# 其中：
# S-T = (S|T)-T
# S^T = (S|T)-(S&T)

# 增强操作符：
# S|=T   S&=T   S-=T   S^=T
# 原运算符效果不变，加等号=表示更新集合S

# 集合处理方法：
# (1) S.add(x) 如果x不在集合S中，将x增加到S中
# (2) S.discard(x) 移除S中的元素x，若x不在集合S中，不报错
# (3) S.remove(x) 移除S中元素x，如果不在集合S中，产生KeyError异常
# (4) S.clear() 清除S中所有元素
# (5) S.pop() 随机从S中取出(返回)并在S中删除某个元素，若S为空产生KeyError异常
# (6) S.copy() 返回集合S的一个副本
# (7) len(s) 返回集合S的元素个数
# (8) x in S 判断x是否在S中，在返回true，不在返回false
# (9) x not in S 判断x是否不在S中
# (10) set(x) 将其他类型变量x转变为集合类型

# 集合类型应用场景：
# 包含关系的比较 如：是否在或不在、子集与包含
# 数据去重：对一组数据中的重复元素进行删除